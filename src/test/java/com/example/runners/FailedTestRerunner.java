package com.example.runners;

import io.cucumber.core.cli.Main;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.List;
import java.util.stream.Collectors;

public class FailedTestRerunner {

    public static void main(String[] args) throws IOException {
        // Path to the rerun file generated by Cucumber
        String rerunFilePath = "target/failedrerun.txt";

        // Read all non-empty lines from the rerun file
        List<String> failedScenarios = Files.lines(Path.of(rerunFilePath))
                .map(String::trim)
                .filter(line -> !line.isEmpty())
                .collect(Collectors.toList());
        System.out.println(failedScenarios);
        if (failedScenarios.isEmpty()) {
            System.out.println("No failed scenarios to rerun.");
            return;
        }

        // Glue package where your step definitions reside
        String glue = "com.example";

        // Build arguments for Cucumber CLI
        // Format: --glue <glue> <feature paths with line numbers>
        String[] cucumberArgs = new String[failedScenarios.size() + 2];
        cucumberArgs[0] = "--glue";
        cucumberArgs[1] = glue;
        for (int i = 0; i < failedScenarios.size(); i++) {
            cucumberArgs[i + 2] = failedScenarios.get(i);
        }

        System.out.println("Rerunning failed scenarios:");
        failedScenarios.forEach(System.out::println);

        // Run Cucumber CLI programmatically
        byte exitStatus = Main.run(cucumberArgs, Thread.currentThread().getContextClassLoader());

        if (exitStatus == 0) {
            System.out.println("Rerun tests passed.");
        } else {
            System.out.println("Rerun tests failed.");
            System.exit(exitStatus);
        }
    }
}